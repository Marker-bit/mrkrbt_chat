"use client";

import { branchOffChat } from "@/lib/actions";
import { ChatRequestOptions, Message as OldMessage } from "ai";
import {
  CheckIcon,
  CopyIcon,
  EditIcon,
  Loader2Icon,
  RefreshCw,
  RouteIcon,
  SplitIcon,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { useMemo, useState } from "react";
import { toast } from "sonner";
import { Button } from "./ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip";
import { mutate } from "swr";
import { unstable_serialize } from "swr/infinite";
import { getChatHistoryPaginationKey } from "./chat-list";
import { Message } from "@/lib/db/db-types";
import { MODELS, PROVIDERS } from "@/lib/models";

export default function MessageButtons({
  message,
  nextMessage,
  setMessages,
  retryMessage,
  chatId,
  readOnly,
  setEditingMessage,
}: {
  message: Message;
  nextMessage: Message;
  setMessages: (
    messages: OldMessage[] | ((messages: OldMessage[]) => OldMessage[])
  ) => void;
  retryMessage: (id: string) => void;
  chatId: string;
  readOnly: boolean;
  setEditingMessage: (editing: boolean) => void;
}) {
  const [copied, setCopied] = useState(false);
  const [branchLoading, setBranchLoading] = useState(false);
  const router = useRouter();

  const retryMessageLocal = async () => {
    setMessages((messages) => {
      const index = messages.findIndex((m) => m.id === message.id);
      return messages.slice(
        0,
        message.role === "assistant" ? index : index + 1
      );
    });
    retryMessage(message.id);
  };

  const branchOff = async () => {
    setBranchLoading(true);
    const res = await branchOffChat(chatId, message.id);
    if ("error" in res) {
      toast.error("Error branching off" + res.error);
      setBranchLoading(false);
    } else {
      router.push(`/chat/${res.chatId}`);
      mutate(unstable_serialize(getChatHistoryPaginationKey));
    }
  };

  const isOpenRouter = useMemo(
    () => message.modelData?.modelId.startsWith("openrouter:"),
    [message.modelData?.modelId]
  );

  const generatedByModel = useMemo(
    () => MODELS.find((m) => m.id === message.modelData?.modelId),
    [message.modelData?.modelId]
  );

  const generatedByProvider = useMemo(
    () => PROVIDERS.find((p) => p.id === message.modelData?.options.provider),
    [message.modelData?.options.provider]
  );

  return (
    <div className="flex gap-1 items-center opacity-0 group-hover:opacity-100 transition">
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            size="icon"
            variant="ghost"
            onClick={() => {
              navigator.clipboard.writeText(message.content);
              if (copied) return;
              setCopied(true);
              setTimeout(() => setCopied(false), 1000);
            }}
          >
            {copied ? <CheckIcon /> : <CopyIcon />}
          </Button>
        </TooltipTrigger>
        <TooltipContent>Copy message</TooltipContent>
      </Tooltip>
      {!readOnly && (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="icon"
              variant="ghost"
              onClick={() => retryMessageLocal()}
            >
              <RefreshCw />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Retry message</TooltipContent>
        </Tooltip>
      )}
      {message.role === "user" && (
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="icon"
              variant="ghost"
              onClick={() => setEditingMessage(true)}
            >
              <EditIcon />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Edit message</TooltipContent>
        </Tooltip>
      )}
      {message.role === "assistant" && (
        <>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                size="icon"
                variant="ghost"
                disabled={branchLoading}
                onClick={() => branchOff()}
              >
                {branchLoading ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  <SplitIcon />
                )}
              </Button>
            </TooltipTrigger>
            <TooltipContent>Branch off</TooltipContent>
          </Tooltip>
          {isOpenRouter && (
            <div className="text-xs text-muted-foreground flex items-center">
              Generated by
              <span className="font-mono mx-1 flex gap-1 items-center">
                <RouteIcon className="size-3" />
                {message.modelData?.modelId.slice(11)}
              </span>
              on
              <span className="flex ml-1 gap-1 items-center">
                <RouteIcon className="size-3" /> OpenRouter
              </span>
            </div>
          )}
          {generatedByModel && (
            <div className="text-xs text-muted-foreground flex items-center">
              <>
                Generated by <generatedByModel.icon className="size-3 mx-1" />
                {generatedByModel.title}
                {generatedByModel.additionalTitle &&
                  ` (${generatedByModel.additionalTitle})`}
                {generatedByProvider && " on"}
              </>
              {generatedByProvider && (
                <>
                  <generatedByProvider.icon className="size-3 mx-1" />
                  {generatedByProvider.title}
                </>
              )}
            </div>
          )}
        </>
      )}
    </div>
  );
}
