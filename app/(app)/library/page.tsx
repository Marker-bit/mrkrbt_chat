import { Button } from "@/components/ui/button"
import { SidebarTrigger } from "@/components/ui/sidebar"
import { auth } from "@/lib/auth"
import { db } from "@/lib/db/drizzle"
import { attachment } from "@/lib/db/schema"
import { formatBytes } from "@/lib/utils";
import { formatRelative } from "date-fns"
import { eq, sum } from "drizzle-orm"
import { DownloadIcon, MessageCircleIcon } from "lucide-react"
import { headers } from "next/headers"
import Link from "next/link"
import { redirect } from "next/navigation"

export default async function ImagesPage() {
  const sessionInfo = await auth.api.getSession({ headers: await headers() })
  if (!sessionInfo) {
    return redirect("/auth")
  }

  const attachments = await db.query.attachment.findMany({
    where: (attachment, { eq }) => eq(attachment.userId, sessionInfo.user.id),
  })
  const dbQuery = await db
    .select({ value: sum(attachment.size) })
    .from(attachment)
    .where(eq(attachment.userId, sessionInfo.user.id))

  const totalSize = dbQuery[0].value ? parseInt(dbQuery[0].value) : 0

  return (
    <div className="flex flex-col gap-2 p-4">
      <div className="flex flex-col">
        <div className="flex items-center gap-2">
          <SidebarTrigger />
          <h1 className="text-2xl font-semibold">Images</h1>
        </div>
        <p className="text-muted-foreground/60">
          All the images that were generated by the AI will be shown here.
        </p>
        <div className="flex items-center gap-2 divide-accent text-muted-foreground/60 text-xs">
          <p>{attachments.length} images</p>
          <p className="text-muted-foreground/60 text-xs">
            {formatBytes(totalSize)}
          </p>
        </div>
      </div>
      <div className="columns-1 sm:columns-2 md:columns-3 lg:columns-4 xl:columns-5 gap-2">
        {attachments.map((attachment) => (
          <div
            key={attachment.id}
            className="group rounded-xl overflow-hidden relative"
          >
            <img
              src={attachment.url}
              alt="image in chat"
              className="w-full group-hover:scale-110 transition-all"
            />
            <div className="absolute bottom-0 w-full h-fit bg-black/50 flex items-center opacity-0 group-hover:opacity-100 transition-opacity px-2 py-1">
              <div className="flex flex-col mr-auto ml-2 text-xs text-muted-foreground/80">
                <div>
                  {formatRelative(new Date(attachment.createdAt), new Date())}
                </div>
                <div>{formatBytes(attachment.size)}</div>
              </div>

              <Button size="icon" variant="ghost" asChild>
                <Link
                  href={`/chat/${attachment.chatId}#${attachment.messageId}`}
                >
                  <MessageCircleIcon />
                </Link>
              </Button>
              <Button size="icon" variant="ghost" asChild>
                <Link href={attachment.url} download="image.png">
                  <DownloadIcon />
                </Link>
              </Button>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
